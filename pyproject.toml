[tool.poetry]
name = "tmi"
version = "0.1.3"
description = "Toolbox for Multiplexed Imaging. Contains scripts and little tools which are used throughout ark-analysis, mibi-bin-tools, and toffy."
authors = [
    "Noah Frey Greenwald <nfgreen@stanford.edu>",
    "Adam Kagel <ackagel@stanford.edu>",
    "Alex Kong <alkong@stanford.edu>",
    "Cami Laura Sowers <csowers@stanford.edu>",
    "Sricharan Reddy Varra <srivarra@stanford.edu>",
]
license = "Modified Apache 2.0"
homepage = "https://github.com/angelolab/tmi"
repository = "https://github.com/angelolab/tmi"
documentation = "https://tmi.readthedocs.io"
readme = "README.md"
packages = [{ include = 'tmi', from = 'src' }]

[tool.poetry.dependencies]
python = "^3.8"
numpy = "1.*"
natsort = "^8"
tifffile = "*"
matplotlib = "^3"
pillow = "^9"
scikit-image = "0.*"
xarray = "*"
xmltodict = "^0.13.0"
charset-normalizer = "^2.1.1"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.1.3"
coveralls = "^3.3.1"
pytest-cases = "^3.6.13"
pytest-order = "^1.0.1"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
pytest-pycodestyle = "^2.3.0"
pytest-asyncio = "^0.19.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
black = "^22.10.0"
isort = "^5.10.1"
mypy = "^0.982"
jupyterlab = "^3.5.0"

[build-system]
requires = ["poetry-core", "setuptools"]
build-backend = "setuptools.build_meta"

## TYPE CHECKING ##

[tool.mypy]
python_version = "3.8"
mypy_path = "$MYPY_CONFIG_FILE_DIR/src:$MYPY_CONFIG_FILE_DIR/tests"
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = false
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = ["matplotlib","matplotlib.pyplot", "skimage.io", "skimage", "tifffile", "pandas", "xmltodict", "natsort"]
ignore_missing_imports = true


## LINTING, FORMATTING ##

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
preview = true

[tool.isort]
py_version = 38
profile = "black"
line_length = 100
multi_line_output = 3

## COVERAGE ##

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["tmi"]

[tool.coverage.report]
exclude_lines = [
    "except ImportError",
    "raise AssertionError",
    "raise NotImplementedError",
]
show_missing = true
ignore_errors = false
fail_under = 45
omit = ["**/*test*.py"]

## TESTING ##

[tool.pytest.ini_options]
addopts = ["-vv", "-s", "--cov", "--pycodestyle"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
testpaths = ["tests"]
norecursedirs = ["tests/utilities"]


[tool.cibuildwheel]
build = ["cp38-*"]
skip = [
    "cp36-*",        # Python 3.6
    "cp37-*",        # Python 3.7
    "cp39-*",        # Python 3.9
    "cp310-*",       # Python 3.10
    "cp311-*",       # Python 3.11
    "*-musllinux_*", # Musllinux
    "pp*",           # PyPy wheels on all platforms
    "*_i686",        # 32bit Linux Wheels
    "*_s390x",       # IBM System/390, "mainframe"
    "*-win32",       # 32bit Windows Wheels
    "*_ppc64le",     # PowerPC
]

# Run tests
test-extras = ["test"]
test-command = "pytest {project}/tests"
build-frontend = "build"
build-verbosity = 3

# Avoid testing on emulated architectures
test-skip = [
    "*-win_arm64",               # Skip testing emulated arm64 biulds on Windows
    "*-*linux_aarch64",          # Skip testing emulated Linux builds
    "*-macosx_arm64",            # Skip testing emulated arm64 builds on Intel Macs
    "*-macosx_universal2:arm64", # Skip testing emulated arm64 portion of universal2 builds
]

# "manylinux" versioning
# PEP 600: https://peps.python.org/pep-0600/
# Build using the manylinux_2_28 image
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"


# On an Linux Intel runner with qemu installed, build Intel and aarch64 (arm) wheels
[tool.cibuildwheel.linux]
archs = ["x86_64", "aarch64"]
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

# Build `universal2` and `arm64` wheels on an Intel runner.
# Note that the `arm64` wheel and the `arm64` part of the `universal2` wheel cannot be tested in this configuration.
[tool.cibuildwheel.macos]
archs = ["x86_64", "arm64", "universal2"]
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"

# Build for Windows x86_64, and ARM 64
[tool.cibuildwheel.windows]
archs = ["AMD64", "ARM64"]
# might not need to repair with delvewheel?
# before-build = "pip install delvewheel"                          # Use delvewheel on windows
# repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"
