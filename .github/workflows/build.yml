name: Wheel Builder

on:
  push:
    branches: ["main"]
  pull_request:
    types: [labeled, opened, synchronize, reopened]
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  build_wheels_sdist:
    name: Build and Test ${{ github.repository }} Pure Python Wheels
    runs-on: ubuntu-latest
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        python-version: [3.8]
        poetry-version: [latest]

    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{matrix.python-version}}
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{matrix.poetry-version}}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Linting, Typechecking and Formatting
        uses: pre-commit/action@v3.0.0

      - name: Load Cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install ${{ github.repository }}
        run: |
          poetry install --no-interaction

      - name: Run Tests
        run: |
          poetry install --with test --no-interaction --no-root
          poetry run pytest

      - name: Build Pure Python Wheels and Source Distribution
        run: |
          poetry build

      - name: Check sdist Metadata
        run: pipx run twine check dist/*

      - name: Store Wheel and sdist Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: distributions
          path: dist/*

      - name: Upload to Coveralls
        uses: coverallsapp/github-action@master
        with:
          path-to-lcov: coverage.lcov
          github-token: ${{ secrets.GITHUB_TOKEN }}

  test_pypi_publish:
    # Test PyPI publish, requires wheels and source dist (sdist)
    name: Publish ${{ github.repository }} to TestPyPI
    # if: github.event_name == 'release' && github.event.action == 'published'
    needs: [build_wheels_sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: distributions
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1.6
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          packages_dir: dist/
          verbose: true

  pypi_publish:
    name: Publish ${{ github.repository }} to to PyPI
    needs: [build_wheels_sdist, test_pypi_publish]

    runs-on: ubuntu-latest
    # Publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: distributions
          path: dist

      - name: PYPI Publish
        uses: pypa/gh-action-pypi-publish@release/v1.6
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: dist/
          verbose: true
